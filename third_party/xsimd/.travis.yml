language: cpp
matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env: COMPILER=gcc GCC=4.9
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env: COMPILER=gcc GCC=5
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6 ENABLE_XTL_COMPLEX=1
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6 ENABLE_FALLBACK=1 ENABLE_XTL_COMPLEX=1
    - os: linux
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
      env: AVX512=1
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env: COMPILER=clang CLANG=3.8
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.9
          packages:
            - clang-3.9
            - g++-arm-linux-gnueabi
            - g++-multilib
            - gcc-multilib
            - qemu
            - qemu-system-arm
      env: COMPILER=clang CLANG=3.9 CROSS_COMPILE=1 ARM_ARCH_DIR=arm-linux-gnueabi GCC_VER=4.7.3 ARM_SETTINGS="armv7-a -mfpu=neon -mfloat-abi=softfp -target arm-linux-gnueabi"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.9
          packages:
            - clang-3.9
            - g++-arm-linux-gnueabi
            - g++-multilib
            - gcc-multilib
            - qemu
            - qemu-system-arm
      env: COMPILER=clang CLANG=3.9 CROSS_COMPILE=1 ARM_ARCH_DIR=arm-linux-gnueabi GCC_VER=4.7.3 ARM_SETTINGS="armv8-a -mfpu=neon -mfloat-abi=softfp -target arm-linux-gnueabi"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.9
          packages:
            - clang-3.9
            - g++-4.8-aarch64-linux-gnu
            - gcc-4.8-aarch64-linux-gnu
            - g++-4.8-multilib
            - gcc-4.8-multilib
            - qemu
            - qemu-system-arm
      env: COMPILER=clang CLANG=3.9 CROSS_COMPILE=1 ARM_ARCH_DIR=aarch64-linux-gnu GCC_VER=4.8.4 ARM_SETTINGS="armv8-a -target aarch64-linux-gnueabi"
    - os: osx
      osx_image: xcode8
      compiler: clang
env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi
install:
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a
    - conda install gtest cmake -c conda-forge
    - if [[ "$ENABLE_XTL_COMPLEX" == 1 ]] ; then
        conda install xtl -c quantstack ;
      fi
    - if [[ "$CROSS_COMPILE" == 1 ]] ; then
        if [[ "$ARM_ARCH_DIR" == "aarch64-linux-gnu" ]] ; then
          mkdir $HOME/linker_bin ;
          ln -s /usr/bin/aarch64-linux-gnu-ld $HOME/linker_bin/ld ;
          echo "SETTING GNU LINKER DIR" ;
          ls -al $HOME/linker_bin/ld ;
          cmake . -DCROSS_COMPILE_ARM=ON -DDOWNLOAD_GTEST=ON -DARM_ARCH_DIRECTORY="$ARM_ARCH_DIR" -DARM_GCC_VER="$GCC_VER" -DTARGET_ARCH="$ARM_SETTINGS --prefix=$HOME/linker_bin/" ;
        else
          cmake . -DCROSS_COMPILE_ARM=ON -DDOWNLOAD_GTEST=ON -DARM_ARCH_DIRECTORY="$ARM_ARCH_DIR" -DARM_GCC_VER="$GCC_VER" -DTARGET_ARCH="$ARM_SETTINGS" ;
        fi
      elif [[ "$ENABLE_FALLBACK" == 1 ]] ; then
        cmake -DENABLE_FALLBACK=ON -DENABLE_XTL_COMPLEX=ON . ;
      elif [[ "$ENABLE_XTL_COMPLEX" == 1 ]] ; then
        cmake -DENABLE_XTL_COMPLEX=ON . ;
      elif [[ "$AVX512" == 1 ]] ; then
        conda install gcc_linux-64 gxx_linux-64;
        sh install_sde.sh ;
        export PATH="$HOME/miniconda/bin:$PATH" ;
        export CC=x86_64-conda_cos6-linux-gnu-gcc CXX=x86_64-conda_cos6-linux-gnu-g++ ;
        which $CXX ;
        cmake . -DTARGET_ARCH=skylake-avx512 -DCMAKE_INSTALL_PREFIX=$HOME/miniconda -DDOWNLOAD_GTEST=ON ;
      else
        cmake . ;
      fi
    - make -j2 test_xsimd
    - cd test
script:
    - if [[ "$CROSS_COMPILE" == 1 ]]; then
        if [[ "$ARM_ARCH_DIR" == "aarch64-linux-gnu" ]]; then
          qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./test_xsimd ;
        else
          qemu-arm -L /usr/arm-linux-gnueabi/ ./test_xsimd ;
        fi
      elif [[ "$AVX512" == 1 ]] ; then
        uname -m ;
        ../intel-sde-downloader/sde-external-8.16.0-2018-01-30-lin/sde64 -cnl -- ./test_xsimd ;
      else
        ./test_xsimd;
      fi
